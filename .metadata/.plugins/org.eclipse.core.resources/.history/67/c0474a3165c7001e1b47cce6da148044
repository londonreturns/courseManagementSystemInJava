package component.frame.student;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Pattern;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import component.button.StandardButton;
import component.frame.StandardFrame;
import exception.DatabaseException;
import exception.FormException;
import font.BigBold;
import font.PlaceHolderFont;
import font.RegularFont;
import font.SubHeadingFont;
import utility.DatabaseConstant;
import utility.TextPrompt;

public class MarkStudentFrame extends StandardFrame implements ActionListener{
	
	public MarkStudentFrame(int x_coord, int y_coord, int width, int height) {
		super(x_coord, y_coord, width, height);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setElements();
	}

	JTextField studentIdTextField = new JTextField();
	JTextField moduleIdTextField = new JTextField();
	JTextField marksTextField = new JTextField();
	
	static StandardButton okBtn = new StandardButton();
	static StandardButton closeBtn = new StandardButton();
	
	private int axisX = 8;
	private int axisY = 110;
	private final int width = 185;
	private final int height = 32;
	
	public void setElements() {
		JLabel titleLabel = new JLabel();
		titleLabel.setText("Mark Student");
		titleLabel.setBounds(0, 0, 500, 100);
		titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
		titleLabel.setFont(new BigBold());
		
		String[] labelItems = {
				"Teacher Id: ","Module Id: ", "Marks: "
		};
		
		for (String menu : labelItems) {
			JLabel menuLabels = new JLabel();
			menuLabels.setText(menu);
			menuLabels.setBounds(axisX, axisY, width, height);
			menuLabels.setFont(new SubHeadingFont());
			axisY = incrementPosition(axisY);
			add(menuLabels);
			((JLabel) menuLabels).setHorizontalAlignment(SwingConstants.RIGHT);
		}
		
		axisX = 250;
		axisY = 110;
		
		Component[] fieldItems = {
				studentIdTextField, moduleIdTextField, marksTextField
		};
		
		for (Component field : fieldItems) {
			field.setBounds(axisX, axisY, width, height);
			field.setFont(new RegularFont());
			axisY = incrementPosition(axisY);
		}
		
		okBtn.setText("Mark");
		okBtn.setBounds(100, 275, 100, 35);
		okBtn.addActionListener(this);
		
		closeBtn.setText("Cancel");
		closeBtn.setBounds(300, 275, 100, 35);
		closeBtn.addActionListener(this);
		
		ArrayList<Component> allComponents = new ArrayList<>(Arrays.asList(
				studentIdTextField, moduleIdTextField, marksTextField,okBtn, closeBtn
		));	
		for(Component comp : allComponents) {
			this.add(comp);
		}
		
		add(titleLabel);
		setPlaceHolders();
	}
	
	public void setDefaultCloseOperation() {
		removeAll();
		dispose();
	}
	
	private static int incrementPosition(int x) {
		return x += 35;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == okBtn) {
			String moduleId = moduleIdTextField.getText().trim();
			String teacherId = studentIdTextField.getText().trim();
			String marksString = marksTextField.getText().trim();

			try {
			    int marks = Integer.parseInt(marksString);

			    // Validate inputs here...

			    Class.forName(DatabaseConstant.CLASSNAME);
			    Connection conn = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USERNAME, DatabaseConstant.PASSWORD);

			    // Check if the teacher is assigned to the module
			    String queryCheckAssignment = "SELECT * FROM teacher_module WHERE teacher_id = ? AND module_id = ?";
			    PreparedStatement pstCheckAssignment = conn.prepareStatement(queryCheckAssignment);
			    pstCheckAssignment.setString(1, teacherId);
			    pstCheckAssignment.setString(2, moduleId);

			    ResultSet resultCheckAssignment = pstCheckAssignment.executeQuery();

			    if (!resultCheckAssignment.next()) {
			        throw new FormException("Teacher is not assigned to the module.");
			    }

			    // Update the marks for the specified student, course, and module
			    String updateMarksQuery = "UPDATE student_enrollment SET marks = ? " +
			                              "WHERE student_id = ? AND course_id = ? AND module_id = ?";
			    PreparedStatement pstUpdateMarks = conn.prepareStatement(updateMarksQuery);
			    pstUpdateMarks.setInt(1, marks);
			    pstUpdateMarks.setString(2, studentId); // Replace with the actual studentId variable
			    pstUpdateMarks.setInt(3, courseId); // Replace with the actual courseId variable
			    pstUpdateMarks.setString(4, moduleId);

			    int rowsAffected = pstUpdateMarks.executeUpdate();

			    if (rowsAffected > 0) {
			        JOptionPane.showMessageDialog(null, "Marks updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
			        resetFields();
			    } else {
			        throw new DatabaseException("Failed to update marks. Please try again.");
			    }

			    conn.close();
			} catch (ClassNotFoundException | SQLException | DatabaseException | FormException | NumberFormatException e1) {
			    // Handle exceptions...
			}

			
		}else {
			removeAll();
			dispose();
		}
		
		
	}
	
	private void setPlaceHolders() {
		TextPrompt moduleIdPlaceHolder = new TextPrompt("Module Id", moduleIdTextField);
		TextPrompt teacherIdPlaceHolder = new TextPrompt("Student Id", studentIdTextField);
		TextPrompt marksPlaceHolder = new TextPrompt("Marks", marksTextField);
		
		ArrayList<Component> allComponents = new ArrayList<>(Arrays.asList(
				moduleIdPlaceHolder, teacherIdPlaceHolder, marksPlaceHolder
				));	
		
		for(Component placeHolderComponent : allComponents) {
			placeHolderComponent.setFont(new PlaceHolderFont());
		}
	}
	
	private void resetFields() {
		moduleIdTextField.setText("");
		studentIdTextField.setText("");
		marksTextField.setText("");
	}
	
}
